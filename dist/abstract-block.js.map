{"version":3,"sources":["abstract-block.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;MAoCa;;;;;;;;;;;;AAYT,2BAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,EAA+B;;;AAC3B,aAAO,QAAQ,OAAR,CADoB;;AAG3B,WAAK,IAAL,GAAY,IAAZ,CAH2B;AAI3B,WAAK,KAAL,GAAa,KAAb,CAJ2B;AAK3B,WAAK,EAAL,GAAU,MAAM,CAAN,EAAS,EAAT,CALiB;AAM3B,WAAK,IAAL,GAAY,IAAZ,CAN2B;AAO3B,WAAK,IAAL,GAAY,IAAC,CAAK,KAAL,CAAW,MAAX,GAAqB,KAAK,KAAL,CAAW,CAAX,EAAc,YAAd,CAA2B,gBAA3B,CAAtB,GAAqE,EAArE,CAPe;AAQ3B,WAAK,gBAAL,GAAwB,wBAAS,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAT,EAAmC,EAAnC,EAAuC,KAAvC,CAAxB,CAR2B;;AAU3B,yBAAI,KAAJ,CAAU,WAAS,KAAK,EAAL,GAAU,IAAnB,GAA0B,IAA1B,CAAV,CAV2B;;AAY3B,WAAK,IAAL,GAZ2B;AAa3B,WAAK,UAAL,GAb2B;KAA/B;;;;;;;;;;4BAsBA,uBAAO;;;;;;;;;;;4BAWP,mCAAY;AACR,UAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAhB,EAAuB,MAAvB,EAA+B;AAC/B,aAAK,KAAL,CAAW,aAAX,CAAyB;AACrB,oBAAU,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAV;AACA,sBAAY,IAAZ;SAFJ,EAD+B;OAAnC,MAKO;AACH,aAAK,MAAL,GADG;OALP;;AASA,WAAK,IAAL,CAAU,MAAV,CAAiB,OAAjB,CAAyB,EAAzB,CAA4B,QAA5B,EAAsC,KAAK,gBAAL,CAAtC,CAVQ;;;;;;;;;;4BAkBZ,6BAAU;AACN,yBAAI,KAAJ,CAAU,WAAS,KAAK,EAAL,CAAnB,CADM;AAEN,WAAK,aAAL,GAFM;;;;;;;;;;;;;;;4BAeV,yCAAe;AACX,WAAK,IAAL,CAAU,MAAV,CAAiB,OAAjB,CAAyB,GAAzB,CAA6B,QAA7B,EAAuC,KAAK,gBAAL,CAAvC,CADW;;;;;;;;4BAOf,+BAAW;;;;;;;4BAOX,2BAAS;;;;;;;;;4BAST,qCAAc","file":"abstract-block.js","sourcesContent":["/**\n * Copyright ¬© 2016, Ambroise Maupate\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is furnished\n * to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * @file abstract-block.js\n * @author Ambroise Maupate\n */\nimport log from \"loglevel\";\nimport waitForImages from \"waitForImages\";\nimport $ from \"jquery\";\nimport {debounce} from \"utils/debounce\";\n\n/**\n * Base class for creating block implementations.\n *\n * **Do not instanciate this class directly, create a sub-class**.\n *\n * @abstract\n */\nexport class AbstractBlock\n{\n    /**\n     * Abstract block constructor.\n     *\n     * It‚Äòs better to extend this class by using `init` method instead\n     * of extending `constructor`.\n     *\n     * @param  {AbstractPage} page\n     * @param  {String} id\n     * @param  {String} type\n     */\n    constructor(page, $cont, type) {\n        type = type || 'block';\n\n        this.page = page;\n        this.$cont = $cont;\n        this.id = $cont[0].id;\n        this.type = type;\n        this.name = (this.$cont.length) ? this.$cont[0].getAttribute('data-node-name') : '';\n        this.onResizeDebounce = debounce(this.onResize.bind(this), 50, false);\n\n        log.debug('\\t‚ú≥Ô∏è #'+this.id + '\\t' + type);\n\n        this.init();\n        this.initEvents();\n    }\n\n    /**\n     * Basic members initialization for children classes.\n     * Do not search for page blocks here, use `onPageReady` method instead\n     *\n     * @abstract\n     */\n    init() {\n\n    }\n\n    /**\n     * Bind load and resize events for this specific block.\n     *\n     * Do not forget to call `super.initEvents();` while extending this method.\n     *\n     * @abstract\n     */\n    initEvents(){\n        if (this.$cont.find('img').length) {\n            this.$cont.waitForImages({\n                finished: this.onLoad.bind(this),\n                waitForAll: true\n            });\n        } else {\n            this.onLoad();\n        }\n\n        this.page.router.$window.on('resize', this.onResizeDebounce);\n    }\n\n    /*\n     * Destroy current block.\n     *\n     * Do not forget to call `super.destroy();` while extending this method.\n     */\n    destroy() {\n        log.debug('\\tüóë #'+this.id);\n        this.destroyEvents();\n    }\n\n    /*\n     * Unbind event block events.\n     *\n     * Make sure you‚Äôve used binded methods to be able to\n     * `off` them correctly.\n     *\n     * Do not forget to call `super.destroyEvents();` while extending this method.\n     *\n     * @abstract\n     */\n    destroyEvents(){\n        this.page.router.$window.off('resize', this.onResizeDebounce);\n    }\n\n    /**\n     * @abstract\n     */\n    onResize() {\n\n    }\n\n    /**\n     * @abstract\n     */\n    onLoad() {\n\n    }\n\n    /**\n     * Called once all page blocks have been created.\n     *\n     * @abstract\n     */\n    onPageReady() {\n\n    }\n}\n"],"sourceRoot":"/source/"}